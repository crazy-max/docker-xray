name: build

on:
  push:
    branches: 'master'
    paths:
      - '.github/workflows/build.yml'
      - 'images/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.3.3
      -
        name: Prepare
        id: prep
        run: |
          echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=docker_image::crazymax/xray
      -
        name: Login to Bintray
        uses: docker/login-action@v1.3.0
        with:
          registry: docker.bintray.io
          username: ${{ secrets.BINTRAY_USERNAME }}
          password: ${{ secrets.BINTRAY_PASSWORD }}
      -
        name: Get Docker JWT Token
        id: jwt
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${{ steps.prep.outputs.docker_image }}:pull" | jq -r .token)
          if [ -z ${TOKEN} -o ${TOKEN} == "null" ]; then
            echo "‚ùå Cannot retrieve token. Check your docker's credentials."
            exit 1
          fi
          echo ::set-output name=token::${TOKEN}
      -
        name: Get Docker Tags
        id: tags
        if: success()
        run: |
          TAG_LIST=$(curl -s -H "Authorization: Bearer ${{ steps.jwt.outputs.token }}" "https://index.docker.io/v2/${{ steps.prep.outputs.docker_image }}/tags/list" | jq -rc '.tags[]')
          echo ::set-output name=list::${TAG_LIST}
      -
        name: Docker Pull
        if: success()
        run: |
          function docker_pull() {
            echo "üì• Pulling Xray $2 $3 from $1..."
            for TAG in $(echo ${{ steps.tags.outputs.list }} | sed "s/,/ /g"); do
              if [ "$3" != "latest" ] && [ "$TAG" = "$2-$3" ]; then
                echo "üî´ Tag $2-$3 already exists and is not latest... Skipping..."
                return
              fi
            done
            docker pull $1:$3
            docker tag $1:$3 ${{ steps.prep.outputs.docker_image }}:$2-$3
          }

          # Xray DB mongo
          while IFS= read -r version
          do
            docker_pull "docker.bintray.io/jfrog/xray-mongo" "mongo" "$version"
          done < "./images/xray-mongo.txt"

          # Xray DB postgres
          while IFS= read -r version
          do
            docker_pull "docker.bintray.io/jfrog/xray-postgres" "postgres" "$version"
          done < "./images/xray-postgres.txt"

          # Xray DB rabbitmq
          while IFS= read -r version
          do
            docker_pull "docker.bintray.io/jfrog/xray-rabbitmq" "rabbitmq" "$version"
          done < "./images/xray-rabbitmq.txt"

          # Xray persist
          while IFS= read -r version
          do
            docker_pull "docker.bintray.io/jfrog/xray-persist" "persist" "$version"
          done < "./images/xray-persist.txt"

          # Xray analysis
          while IFS= read -r version
          do
            docker_pull "docker.bintray.io/jfrog/xray-analysis" "analysis" "$version"
          done < "./images/xray-analysis.txt"

          # Xray indexer
          while IFS= read -r version
          do
            docker_pull "docker.bintray.io/jfrog/xray-indexer" "indexer" "$version"
          done < "./images/xray-indexer.txt"

          # Xray server
          while IFS= read -r version
          do
            docker_pull "docker.bintray.io/jfrog/xray-server" "server" "$version"
          done < "./images/xray-server.txt"

          # Router
          while IFS= read -r version
          do
            docker_pull "docker.bintray.io/jfrog/router" "router" "$version"
          done < "./images/router.txt"
      -
        name: Login to DockerHub
        if: success()
        uses: docker/login-action@v1.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Docker Push
        if: success()
        run: |
          if [[ -z $(docker image ls ${{ steps.prep.outputs.docker_image }} --format "{{.ID}}") ]]; then
            echo "üî´ No tag to push"
            exit 0
          fi
          docker push ${{ steps.prep.outputs.docker_image }}
